import os
configfile : "config.yaml"

SAMPLES = list(set([x.split('.')[0] for x in os.listdir(config["assemblyPath"]) if x.endswith('.fasta')]))
SAMPLES.sort()
#print(SAMPLES)

#for testing purposes
#SAMPLES = ["DMTRCTR1303"]



rule all:
    input:
        expand(config["annotationPath"] + "/{sample}/GenomeAnnotation/funAnno/annotate_results/{sample}.annotations.txt", sample=SAMPLES),
        expand(config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno/antismash/antismash.done", sample=SAMPLES)


rule maskGenome:
    input:
        genome=config["assemblyPath"] + "/{sample}.fasta"
    output:
        #outdir=directory(config["annotationPath"]  + "/{sample}/RepeatMasking/RepeatMasker"), 
        maskedGenome=config["annotationPath"]  + "/{sample}/RepeatMasking/RepeatMasker/{sample}.fasta.masked"
    params:
        outdir=directory(config["annotationPath"]  + "/{sample}/RepeatMasking/RepeatMasker")
    run:
        shell("{config[RepeatMasker]} -pa 12 -s -gff -lib {config[RepLib]} -dir {params.outdir} -xsmall {input.genome}")


rule funPrep:
    input:
        maskedGenome=config["annotationPath"]  + "/{sample}/RepeatMasking/RepeatMasker/{sample}.fasta.masked" 
    output:
        cleanedGenome = config["annotationPath"]  + "/{sample}/GenomeAnnotation/{sample}.masked.cleaned.fasta",
        sortedGenome = config["annotationPath"]  + "/{sample}/GenomeAnnotation/{sample}.masked.cleaned.sorted.fasta",
        predictDir = directory(config["annotationPath"]  + "/{sample}/GenomeAnnotation")
    params:
        predictDir = directory(config["annotationPath"]  + "/{sample}/GenomeAnnotation")
    run:
        #changed the clean.py script to run on the compute node in PBS_JOBFS as it would otherwise 
        #overwrite each other in the same folder where all the jobs are started from.
        shell("mkdir -p {params.predictDir}"),
        shell("funannotate clean --cpus 10 -i {input.maskedGenome} -o {output.cleanedGenome} --pident 80" ),
        shell("funannotate sort --minlen 1000 -i {output.cleanedGenome} -o {output.sortedGenome}") 

rule funGenPredict:
    input:
        sortedGenome = config["annotationPath"]  + "/{sample}/GenomeAnnotation/{sample}.masked.cleaned.sorted.fasta"
    output:
        proteinSeq = config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno/predict_results/{sample}.proteins.fa",
        stats = config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno/predict_results/{sample}.stats.json",
        gff3 = config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno/predict_results/{sample}.gff3" 
    params:
        #These $PBS_JOBFS variables are specific to our computer infrastructure on NCI in Australia
        #all compute will be done on the node with sepific storage hence predict.py will excute in
        #PBS_JOBFS this is changed in the predict.py script
        tmpPredictdir = directory("$PBS_JOBFS/funAnno"),
        predictDir = directory(config["annotationPath"]  + "/{sample}/GenomeAnnotation"),
        tmpSortedGenome = directory("$PBS_JOBFS/genome.fasta")
    run:
        shell('cp {input.sortedGenome} {params.tmpSortedGenome}'),
        shell('funannotate predict -i {params.tmpSortedGenome} --cpus 48 -o {params.tmpPredictdir} \
		--species {wildcards.sample} --busco_seed_species botrytis_cinerea'),
        shell('mkdir -p {params.predictDir}'),
        shell('cp -r {params.tmpPredictdir} {params.predictDir}/.'),
        shell('rm -rf {params.predictDir}/funAnno/predict_misc')

rule InterPro:
    input:
        proteinSeq = config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno/predict_results/{sample}.proteins.fa"
    output:
        interproXML = config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno/annotate_misc/iprscan.xml"
    params:
        interpro = " -f XML -cpu 40 -dp -goterms -pa",
        predictDir = directory(config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno/annotate_misc"),
    run:
        #Changed the iprscan-local.py script to run on the node using PBS_JOBFS specific to NCI
        shell("mkdir -p {params.predictDir}"),
        shell("funannotate iprscan --iprscan_path {config[InterProScan]} -m local --cpus 11 -i {input.proteinSeq} -o {output.interproXML}")

rule funFuncAnno:
    #TO-DO add step that moves funAnno to the node and change the predict step to run on the node in PBS_JOBFS to avoid overwriting stuff
    input:
        interproXML = config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno/annotate_misc/iprscan.xml",
    output:
        funAnnotation = config["annotationPath"] + "/{sample}/GenomeAnnotation/funAnno/annotate_results/{sample}.annotations.txt"
    params:
        predictDir = directory(config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno")
    run:
        shell("funannotate annotate --cpus 24 -i {params.predictDir}")

rule Antismash:
    input:
        gff3 = config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno/predict_results/{sample}.gff3",
        sortedGenome = config["annotationPath"]  + "/{sample}/GenomeAnnotation/{sample}.masked.cleaned.sorted.fasta"
    output:
        antismashDone = config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno/antismash/antismash.done"
    params:
        antismashDir = directory(config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno/antismash"),
        antismashParam = "--taxon fungi --fullhmmer -c 30 --pfam2go --asf --cassis --cb-general --genefinding-tool none --output-dir "+ config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno/antismash --genefinding-gff3 "
    run:
        shell("antismash {params.antismashParam} {input.gff3} {input.sortedGenome}"),
        shell("touch {output.antismashDone}")
         
####Old below#############


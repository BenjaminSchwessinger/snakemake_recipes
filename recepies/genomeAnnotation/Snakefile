import os
configfile : "config.yaml"


SAMPLES = list(set([x.split('_')[0] for x in os.listdir(config["assemblyPath"]) if x.endswith('.fasta')]))
SAMPLES.sort()
print(SAMPLES)

#for testing purposes
SAMPLES = ["DMTRCTR4452"]


rule all:
    input:
       #expand(config["annotationPath"]  + "/{sample}/RepeatMasking/RepeatMasker/{sample}.fasta.masked", sample=SAMPLES),
       #expand(config["annotationPath"]  + "/{sample}/GenomeAnnotation/{sample}.masked.cleaned.sorted.fasta", sample=SAMPLES),
       #expand(config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno/predict_results/{sample}.stats.json", sample=SAMPLES ),
        expand(config["annotationPath"] + "/{sample}/GenomeAnnotation/funAnno/annotate_results/{sample}.annotations.txt", sample=SAMPLES)


rule maskGenome:
    input:
        genome=config["assemblyPath"] + "/{sample}.fasta"
    output:
        #outdir=directory(config["annotationPath"]  + "/{sample}/RepeatMasking/RepeatMasker"), 
        maskedGenome=config["annotationPath"]  + "/{sample}/RepeatMasking/RepeatMasker/{sample}.fasta.masked"
    params:
        outdir=directory(config["annotationPath"]  + "/{sample}/RepeatMasking/RepeatMasker")
    run:
        shell("{config[RepeatMasker]} -pa 16 -s -gff -lib {config[RepLib]} -dir {params.outdir} -xsmall {input.genome}")


rule funPrep:
    input:
        maskedGenome=config["annotationPath"]  + "/{sample}/RepeatMasking/RepeatMasker/{sample}.fasta.masked" 
    output:
        cleanedGenome = config["annotationPath"]  + "/{sample}/GenomeAnnotation/{sample}.masked.cleaned.fasta",
        sortedGenome = config["annotationPath"]  + "/{sample}/GenomeAnnotation/{sample}.masked.cleaned.sorted.fasta"
    run:
        shell("funannotate clean -i {input.maskedGenome} -o {output.cleanedGenome} --pident 80"),
        shell("funannotate sort -i {output.cleanedGenome} -o {output.sortedGenome}") 

rule funGenPredict:
    input:
        sortedGenome = config["annotationPath"]  + "/{sample}/GenomeAnnotation/{sample}.masked.cleaned.sorted.fasta"
    output:
        proteinSeq = config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno/predict_results/{sample}.proteins.fa",
        stats = config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno/predict_results/{sample}.stats.json",
        #predictDir = directory(config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno")
    params:
        predictDir = directory(config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno")
    run:
        #shell('which perl'),
        #shell('perl -e "print \"@INC\""' ),
        shell('funannotate predict -i {input.sortedGenome} --cpus 48 -o {params.predictDir} \
		--species {wildcards.sample} --busco_seed_species botrytis_cinerea')

rule InterPro:
    input:
        #predictDir = directory(config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno"),
        proteinSeq = config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno/predict_results/{sample}.proteins.fa"
    output:
        interproXML = config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno/annotate_misc/iprscan.xml"
    params:
        interpro = " -f XML -cpu 44 -dp -goterms -pa",
        predictDir = directory(config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno")
    run:
        shell("{config[InterProScan]} {params.interpro} -T {params.predictDir}/itmp -o {output.interproXML} -i {input.proteinSeq}"),
        shell("rm -r {params.predictDir}/itmp")

rule funFuncAnno:
    input:
        interproXML = config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno/annotate_misc/iprscan.xml",
        #predictDir = directory(config["annotationPath"]  + "/{sample}/GenomeAnnotation/funAnno")
    output:
        funAnnotation = config["annotationPath"] + "/{sample}/GenomeAnnotation/funAnno/annotate_results/{sample}.annotations.txt"
    run:
        shell("funannotate annotate --cpus 24 -i {InterPro.params.predictDir}")


         
####Old below#############


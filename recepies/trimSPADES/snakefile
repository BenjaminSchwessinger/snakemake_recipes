import os
configfile : "config.yaml"


SAMPLES = list(set([x.split('_')[0] for x in os.listdir(config["untrimmedPath"]) if x.endswith('fastq.gz')]))
SAMPLES.sort()
#SAMPLES = SAMPLES[:3]
print(SAMPLES)
for x in [x for x in os.listdir(config["untrimmedPath"]) if x.endswith('fastq.gz')]:
    if len(x.split('_')) > 2: 
        oldFilename = os.path.join(config["untrimmedPath"], x)
        sample = x.split('_')[0]
        newFilename = os.path.join(config["untrimmedPath"], sample +'_'+ x.split(sample)[-1])
        print(oldFilename, newFilename)
        #os.rename(oldFilename, newFilename)
rule all:
    input:
        expand(config["untrimmedPath"]  + "/../FASTQC/PRE/{sample}/{sample}_{lane}R{number}.fastqc.done" , sample=SAMPLES, number=["1","2"], lane=["L001", "L002"]),
        expand(config["trimmedPath"] +  "/{sample}/{sample}_{lane}R{number}.trimmed.fastq.gz", sample=SAMPLES, lane=["L001", "L002"], number=["1","2"]),
        expand("{path}/../FASTQC/POST/{sample}/fastqc.done", sample=SAMPLES, path=config["untrimmedPath"]),
        #expand(config["spadesPath"] + "/{sample}/assembly/{sample}.fasta", sample=SAMPLES),
        expand(config["spadesPath"] + "/{sample}/stats/{sample}.short_summary_assembly.txt", sample=SAMPLES),
        expand(config["spadesPath"] + "/{sample}/stats/{sample}.assemblyStats.txt", sample=SAMPLES)

rule fastqQCpre:
    input:
        read1=expand(config["untrimmedPath"]  + "/{{sample}}_{lane}R1.fastq.gz",  lane=["L001", "L002"]),
	read2=expand(config["untrimmedPath"] +  "/{{sample}}_{lane}R2.fastq.gz",  lane=["L001", "L002"])
    output:
        fastqQCpredone=expand(config["untrimmedPath"]  + "/../FASTQC/PRE/{{sample}}/{{sample}}_{lane}R{number}.fastqc.done" ,  number=["1","2"], lane=["L001", "L002"]),
        outdir = directory(config["untrimmedPath"]  + "/../FASTQC/PRE/{sample}")
    shell:
        "{config[fastqc]} {input.read1} {input.read2} --outdir={output.outdir};"
	"touch {output.fastqQCpredone}"


rule trimmomatic:
    input:
        read1=config["untrimmedPath"]  + "/{sample}_{lane}R1.fastq.gz",
        read2=config["untrimmedPath"] +  "/{sample}_{lane}R2.fastq.gz"
    output:
        tpread1= config["trimmedPath"] +  "/{sample}/{sample}_{lane}R1.trimmed.fastq.gz",
	tpread2= config["trimmedPath"] +  "/{sample}/{sample}_{lane}R2.trimmed.fastq.gz",
	tpread3= config["trimmedPath"] +  "/{sample}/{sample}_{lane}R3.trimmed.fastq.gz",
	tmp1=temp(config["trimmedPath"] + "/{sample}/{sample}_{lane}tmp1.fastq.gz"),
        tmp2=temp(config["trimmedPath"] + "/{sample}/{sample}_{lane}tmp2.fastq.gz"),
    shell:
        "java -jar {config[trimmomatic]} PE {input.read1} {input.read2} {output.tpread1} {output.tmp1} \
	{output.tpread2} {output.tmp2} ILLUMINACLIP:{config[adapters]}:2:30:10:4:keepBothReads LEADING:3 TRAILING:3 MINLEN:36;"
	"cat {output.tmp1} {output.tmp2} > {output.tpread3};"


rule fastqQCpost:
    input:
        in1= expand(config["trimmedPath"] +  "/{{sample}}/{{sample}}_{lane}R1.trimmed.fastq.gz",  lane=["L001", "L002"]),
	in2= expand(config["trimmedPath"] +  "/{{sample}}/{{sample}}_{lane}R2.trimmed.fastq.gz",  lane=["L001", "L002"]),
	in3= expand(config["trimmedPath"] +  "/{{sample}}/{{sample}}_{lane}R3.trimmed.fastq.gz",  lane=["L001", "L002"]),
    output:
        postoutdir=directory(config["untrimmedPath"] + "/../FASTQC/POST/{sample}/"),
        fastqQCpostdone= config["untrimmedPath"] + "/../FASTQC/POST/{sample}/fastqc.done"
    shell:
        "{config[fastqc]} {input.in1} {input.in2} {input.in3}  --outdir={output.postoutdir};"
	"touch {output.fastqQCpostdone}"

rule SPADES:
    input:
        in1= expand(config["trimmedPath"] +  "/{{sample}}/{{sample}}_{lane}R1.trimmed.fastq.gz",  lane=["L001", "L002"]),
        in2= expand(config["trimmedPath"] +  "/{{sample}}/{{sample}}_{lane}R2.trimmed.fastq.gz",  lane=["L001", "L002"]),
        in3= expand(config["trimmedPath"] +  "/{{sample}}/{{sample}}_{lane}R3.trimmed.fastq.gz",  lane=["L001", "L002"])
    output:
        outdir=directory(config["spadesPath"] + "/{sample}/assembly"),
        tmpassembly=temp(config["spadesPath"] + "/{sample}/assembly/contigs.fasta"),
        assembly=config["spadesPath"] + "/{sample}/assembly/{sample}.fasta"
    shell:
        "{config[spades]} --isolate -t 28 -o {output.outdir} \
        --pe1-1 {input.in1[0]} --pe1-2 {input.in2[0]} --pe1-s {input.in3[0]} \
        --pe1-1 {input.in1[1]} --pe1-2 {input.in2[1]} --pe1-s {input.in3[1]};"
        "cp {output.tmpassembly} {output.assembly}"

rule Astats:
    input:
        assembly=config["spadesPath"] + "/{sample}/assembly/{sample}.fasta"
    output:
        outdir=directory(config["spadesPath"] + "/{sample}/stats"),
        astats=config["spadesPath"] + "/{sample}/stats/{sample}.assemblyStats.txt"
    shell:
        "stats.sh {input.assembly} > {output.astats}"

rule BUSCO3:
    input:
        assembly=config["spadesPath"] + "/{sample}/assembly/{sample}.fasta"
    output:
        outdir=directory(config["spadesPath"] + "/{sample}/run_BUSCO"),
        shortsum=config["spadesPath"] + "/{sample}/run_BUSCO/short_summary_BUSCO.txt",
        shortsum2=config["spadesPath"] + "/{sample}/stats/{sample}.short_summary_assembly.txt"
    shell:
        "cd {output.outdir}/..;"
        "run_BUSCO.py -i {input.assembly} -l {config[busconlin]} \
        -o BUSCO -m genome -c 16 -f;"
        "cp {output.shortsum} {output.shortsum2}"
     
